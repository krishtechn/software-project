{"version":3,"sources":["DrawerToggleButton.tsx"],"names":["DrawerToggleButton","tintColor","rest","navigation","borderless","dispatch","DrawerActions","toggleDrawer","styles","touchable","Platform","select","ios","undefined","default","top","right","bottom","left","icon","require","StyleSheet","create","height","width","margin","resizeMode","marginHorizontal"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;AACA;;;;;;;;AAWe,SAASA,kBAAT,OAA2D;AAAA,MAA/B;AAAEC,IAAAA,SAAF;AAAa,OAAGC;AAAhB,GAA+B;AACxE,QAAMC,UAAU,GAAG,4BAAnB;AAEA,sBACE,oBAAC,2BAAD,eACMD,IADN;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,iBAAiB,EAAC,QAHpB;AAIE,IAAA,cAAc,EAAE;AAAEE,MAAAA,UAAU,EAAE;AAAd,KAJlB;AAKE,IAAA,OAAO,EAAE,MAAMD,UAAU,CAACE,QAAX,CAAoBC,sBAAcC,YAAd,EAApB,CALjB;AAME,IAAA,KAAK,EAAEC,MAAM,CAACC,SANhB;AAOE,IAAA,OAAO,EAAEC,sBAASC,MAAT,CAAgB;AACvBC,MAAAA,GAAG,EAAEC,SADkB;AAEvBC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAE,EAAP;AAAWC,QAAAA,KAAK,EAAE,EAAlB;AAAsBC,QAAAA,MAAM,EAAE,EAA9B;AAAkCC,QAAAA,IAAI,EAAE;AAAxC;AAFc,KAAhB;AAPX,mBAYE,oBAAC,kBAAD;AACE,IAAA,KAAK,EAAE,CAACV,MAAM,CAACW,IAAR,EAAclB,SAAS,GAAG;AAAEA,MAAAA;AAAF,KAAH,GAAmB,IAA1C,CADT;AAEE,IAAA,MAAM,EAAEmB,OAAO,CAAC,iCAAD,CAFjB;AAGE,IAAA,YAAY,EAAE;AAHhB,IAZF,CADF;AAoBD;;AAED,MAAMZ,MAAM,GAAGa,wBAAWC,MAAX,CAAkB;AAC/BH,EAAAA,IAAI,EAAE;AACJI,IAAAA,MAAM,EAAE,EADJ;AAEJC,IAAAA,KAAK,EAAE,EAFH;AAGJC,IAAAA,MAAM,EAAE,CAHJ;AAIJC,IAAAA,UAAU,EAAE;AAJR,GADyB;AAO/BjB,EAAAA,SAAS,EAAE;AACTkB,IAAAA,gBAAgB,EAAE;AADT;AAPoB,CAAlB,CAAf","sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  ParamListBase,\n  useNavigation,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Image, Platform, StyleSheet } from 'react-native';\n\nimport type { DrawerNavigationProp } from '../types';\n\ntype Props = {\n  accessibilityLabel?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  tintColor?: string;\n};\n\nexport default function DrawerToggleButton({ tintColor, ...rest }: Props) {\n  const navigation = useNavigation<DrawerNavigationProp<ParamListBase>>();\n\n  return (\n    <PlatformPressable\n      {...rest}\n      accessible\n      accessibilityRole=\"button\"\n      android_ripple={{ borderless: true }}\n      onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}\n      style={styles.touchable}\n      hitSlop={Platform.select({\n        ios: undefined,\n        default: { top: 16, right: 16, bottom: 16, left: 16 },\n      })}\n    >\n      <Image\n        style={[styles.icon, tintColor ? { tintColor } : null]}\n        source={require('./assets/toggle-drawer-icon.png')}\n        fadeDuration={0}\n      />\n    </PlatformPressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n  },\n  touchable: {\n    marginHorizontal: 11,\n  },\n});\n"]}