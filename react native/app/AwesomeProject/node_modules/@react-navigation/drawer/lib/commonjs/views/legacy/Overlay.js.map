{"version":3,"sources":["Overlay.tsx"],"names":["interpolate","interpolateDeprecated","interpolateNode","cond","greaterThan","Animated","PROGRESS_EPSILON","Overlay","React","forwardRef","ref","progress","onPress","style","props","animatedStyle","opacity","inputRange","Platform","OS","outputRange","zIndex","styles","overlay","overlayStyle","pressable","select","web","WebkitTapHighlightColor","default","StyleSheet","create","absoluteFillObject","backgroundColor","flex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA,MAAM;AACJ;AACAA,EAAAA,WAAW,EAAEC,qBAFT;AAGJC,EAAAA,eAHI;AAIJC,EAAAA,IAJI;AAKJC,EAAAA;AALI,IAMFC,8BANJ;AAQA,MAAML,WAAmC,GACvCE,eADuC,aACvCA,eADuC,cACvCA,eADuC,GACpBD,qBADrB;AAGA,MAAMK,gBAAgB,GAAG,IAAzB;AAOA,MAAMC,OAAO,gBAAGC,KAAK,CAACC,UAAN,CAAiB,SAASF,OAAT,OAE/BG,GAF+B,EAG/B;AAAA,MAFA;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,KAArB;AAA4B,OAAGC;AAA/B,GAEA;AACA,QAAMC,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAEhB,WAAW,CAACW,QAAD,EAAW;AAC7B;AACA;AACA;AACA;AACAM,MAAAA,UAAU,EACRC,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASC,EAAT,KAAgB,OAA7C,GACI,CAAC,CAAD,EAAI,CAAJ,CADJ,GAEI,CAACb,gBAAD,EAAmB,CAAnB,CARuB;AAS7Bc,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AATgB,KAAX,CADA;AAYpB;AACA;AACA;AACAC,IAAAA,MAAM,EAAElB,IAAI,CAACC,WAAW,CAACO,QAAD,EAAWL,gBAAX,CAAZ,EAA0C,CAA1C,EAA6C,CAAC,CAA9C;AAfQ,GAAtB;AAkBA,sBACE,oBAAC,8BAAD,CAAU,IAAV,eACMQ,KADN;AAEE,IAAA,GAAG,EAAEJ,GAFP;AAGE,IAAA,KAAK,EAAE,CAACY,MAAM,CAACC,OAAR,EAAiBC,YAAjB,EAA+BT,aAA/B,EAA8CF,KAA9C;AAHT,mBAKE,oBAAC,sBAAD;AAAW,IAAA,OAAO,EAAED,OAApB;AAA6B,IAAA,KAAK,EAAEU,MAAM,CAACG;AAA3C,IALF,CADF;AASD,CA/Be,CAAhB;;AAiCA,MAAMD,YAAY,GAAGN,sBAASQ,MAAT,CAAwC;AAC3DC,EAAAA,GAAG,EAAE;AACH;AACA;AACAC,IAAAA,uBAAuB,EAAE;AAHtB,GADsD;AAM3DC,EAAAA,OAAO,EAAE;AANkD,CAAxC,CAArB;;AASA,MAAMP,MAAM,GAAGQ,wBAAWC,MAAX,CAAkB;AAC/BR,EAAAA,OAAO,EAAE,EACP,GAAGO,wBAAWE,kBADP;AAEPC,IAAAA,eAAe,EAAE;AAFV,GADsB;AAK/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,IAAI,EAAE;AADG;AALoB,CAAlB,CAAf;;eAUe3B,O","sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  // @ts-expect-error: this is to support reanimated 1\n  interpolate: interpolateDeprecated,\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateNode =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n  onPress: () => void;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, onPress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange:\n        Platform.OS === 'windows' || Platform.OS === 'macos'\n          ? [0, 1]\n          : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    >\n      <Pressable onPress={onPress} style={styles.pressable} />\n    </Animated.View>\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  pressable: {\n    flex: 1,\n  },\n});\n\nexport default Overlay;\n"]}