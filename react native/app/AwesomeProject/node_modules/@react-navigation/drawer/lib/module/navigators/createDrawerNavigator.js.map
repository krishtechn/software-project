{"version":3,"sources":["createDrawerNavigator.tsx"],"names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","id","initialRouteName","defaultStatus","customDefaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","openByDefault","lazy","drawerContentOptions","rest","defaultScreenOptions","Object","assign","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","state","descriptors","navigation","NavigationContent"],"mappings":"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","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  DrawerStatus,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  id,\n  initialRouteName,\n  defaultStatus: customDefaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: openByDefault is deprecated\n    openByDefault,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: drawerContentOptions is deprecated\n    drawerContentOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const defaultStatus: DrawerStatus =\n    customDefaultStatus !== undefined\n      ? customDefaultStatus\n      : openByDefault\n      ? 'open'\n      : 'closed';\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      id,\n      initialRouteName,\n      defaultStatus,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        defaultStatus={defaultStatus}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"]}